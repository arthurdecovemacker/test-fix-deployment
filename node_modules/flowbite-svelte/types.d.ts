import type { SvelteComponent } from 'svelte';
export declare type AccordionIconType = {
    up: typeof SvelteComponent;
    down: typeof SvelteComponent;
};
export interface ActivityType {
    title: HTMLElement | string;
    date: Date | string;
    src: string;
    alt: string;
    text?: HTMLElement | string;
}
export declare type AlignType = 'text-center' | 'text-left' | 'text-right';
export interface AuthFieldType {
    label: string;
    fieldtype: string;
    required?: boolean;
    placeholder?: string;
}
export declare type AuthFunctionType = () => Promise<void>;
export interface AvatarType {
    src?: string;
    alt?: string;
    size?: number;
    border?: boolean;
    round?: boolean;
    header?: string;
    text?: string;
}
export interface ButtonGroupType {
    name: string;
    href?: string;
    rel?: string;
    icon?: typeof SvelteComponent;
    iconSize?: number;
    iconClass?: string;
}
export declare type ButtonType = 'button' | 'submit' | 'reset';
export declare type Buttontypes = 'blue' | 'blue-outline' | 'dark' | 'dark-outline' | 'light' | 'green' | 'green-outline' | 'red' | 'red-outline' | 'yellow' | 'yellow-outline' | 'purple' | 'purple-outline';
export declare type Buttonshadows = 'blue' | 'green' | 'cyan' | 'teal' | 'lime' | 'red' | 'pink' | 'purple';
export declare type CardButtonType = {
    textSize?: Textsize;
    name: string;
    type?: Buttontypes;
    href?: string;
    rel?: string;
    rounded?: boolean;
};
export declare type CarouselIconType = {
    next: typeof SvelteComponent;
    prev: typeof SvelteComponent;
};
export interface CheckboxType {
    id: string;
    label: string;
    checked?: boolean;
    disabled?: boolean;
    helper?: string;
}
export declare type Colors = 'blue' | 'gray' | 'red' | 'yellow' | 'purple' | 'green' | 'indigo' | 'pink';
export declare type CrumbType = {
    label: string;
    href: string;
};
export declare type DropdownColorType = 'blue' | 'blue-outline' | 'dark' | 'dark-outline' | 'light' | 'green' | 'green-outline' | 'red' | 'red-outline' | 'yellow' | 'yellow-outline' | 'purple' | 'purple-outline';
export interface DropdownType {
    name: string;
    href: string;
    divider?: boolean;
}
export declare type FormColorType = 'blue' | 'red' | 'green' | 'purple' | 'teal' | 'yellow' | 'orange';
export declare type Gradientduotones = 'purple2blue' | 'cyan2blue' | 'green2blue' | 'purple2pink' | 'pink2orange' | 'teal2lime' | 'red2yellow';
export interface GroupTimelineType {
    title: string | HTMLElement;
    src: string;
    alt: string;
    href?: string;
    isPrivate?: boolean;
    comment?: string | HTMLElement;
}
export interface IconTabType {
    name: string;
    active: boolean;
    href: string;
    rel?: string;
    icon?: typeof SvelteComponent;
    iconSize?: number;
}
export declare type ImgType = {
    src: string;
    alt?: string;
};
export declare type InputType = 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'image' | 'month' | 'number' | 'password' | 'reset' | 'submit' | 'tel' | 'text' | 'time' | 'url' | 'week';
export interface InteractiveTabType {
    name: string;
    id: number;
    content: string | typeof SvelteComponent;
}
export interface LinkType {
    name: string;
    href: string;
    rel?: string;
}
export interface ListCardType {
    img: ImgType;
    field1: string;
    field2?: string;
    field3?: string;
}
export interface NavbarType {
    name: string;
    href: string;
    rel?: string;
    child?: NavbarType[];
}
export interface PageType {
    pageNum: number;
    href: string;
}
export interface PillTabType {
    name: string;
    selected: boolean;
    href: string;
}
export declare type SelectOptionType = {
    name: string;
    value: string;
};
export declare type SidebarType = {
    id: number;
    name: string;
    href?: string;
    icon?: typeof SvelteComponent;
    iconSize?: number;
    iconClass?: string;
    iconColor?: string;
    rel?: string;
    children?: SidebarType[];
    subtext?: HTMLElement;
};
export declare type SidebarCtaType = {
    label: string;
    text: HTMLElement;
};
export interface SiteType {
    name: string;
    href: string;
    img?: string;
}
export interface SocialMediaLinkType {
    parent: string;
    children?: LinkType[];
}
export interface SocialMediaType {
    href: string;
    icon: typeof SvelteComponent;
    iconSize?: number;
    iconClass?: string;
}
export interface TabHeadType {
    name: string;
    id: number;
}
export interface TabType {
    name: string;
    active: boolean;
    href: string;
    rel?: string;
}
export declare type Textsize = 'text-xs' | 'text-sm' | 'text-base' | 'text-lg' | 'text-xl' | 'text-2xl' | 'text-3xl' | 'text-4xl';
export interface TimelineItemType {
    date: Date | string;
    title: string;
    icon?: typeof SvelteComponent;
    href?: string;
    linkname?: string;
    text?: HTMLElement | string;
}
export interface TimelineItemVerticalType {
    date: Date | string;
    title: string;
    icon?: typeof SvelteComponent;
    iconSize?: number;
    iconClass?: string;
    href?: string;
    linkname?: string;
    text?: HTMLElement | string;
}
export interface TimelineItemHorizontalType {
    date: Date | string;
    title: string;
    icon?: typeof SvelteComponent;
    iconSize?: number;
    iconClass?: string;
    text?: HTMLElement | string;
}
export declare type ToggleColorType = 'blue' | 'red' | 'green' | 'purple' | 'yellow' | 'teal' | 'orange';
export interface TransitionParamTypes {
    delay?: number;
    duration?: number;
    easing?: (t: number) => number;
    css?: (t: number, u: number) => string;
    tick?: (t: number, u: number) => void;
}
export declare type TransitionTypes = 'fade' | 'fly' | 'slide' | 'blur' | 'in:fly' | 'out:fly' | 'in:slide' | 'out:slide' | 'in:fade' | 'out:fade' | 'in:blur' | 'out:blur';
